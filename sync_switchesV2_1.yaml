blueprint:
  name: Group sync for Switch & Light (one lock, auto-unlock v4)
  description: >
    组内任意一个实体（switch 或 light）状态改变时，把状态同步到组内其他实体。
    使用一个 input_boolean 作为互斥锁，内置超时自解锁（默认 30 秒），避免死循环/雪崩触发。
  domain: automation
  input:
    entities:
      name: 同步组（可混合选择 switch / light）
      selector:
        entity:
          multiple: true
    sync_lock:
      name: 同步锁（input_boolean）
      selector:
        entity:
          domain: input_boolean
    auto_unlock_after:
      name: 自解锁超时（秒，0 表示关闭）
      default: 30
      selector:
        number:
          min: 0
          max: 600
          unit_of_measurement: s
          mode: box
          step: 1

mode: queued
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input entities

# 锁在 on 时直接不进入动作，避免重入
condition:
  - condition: state
    entity_id: !input sync_lock
    state: 'off'

action:
  - variables:
      master: "{{ trigger.entity_id }}"
      master_state: "{{ trigger.to_state.state | default('unknown') }}"
      _lock: !input sync_lock
      _auto: !input auto_unlock_after

  # 仅接受 on/off 两种状态
  - condition: template
    value_template: "{{ master_state in ['on','off'] }}"

  # 上锁
  - service: input_boolean.turn_on
    target:
      entity_id: "{{ _lock }}"

  # 并行启动“自解锁保险”（仅当 _auto > 0）
  - if:
      - condition: template
        value_template: "{{ (_auto | int(0)) > 0 }}"
    then:
      - parallel:
          - sequence:
              - delay:
                  seconds: "{{ _auto | int }}"
              - condition: template
                value_template: "{{ states(_lock) == 'on' }}"
              - service: input_boolean.turn_off
                target:
                  entity_id: "{{ _lock }}"

  # 逐个处理本组成员
  - repeat:
      for_each: !input entities
      sequence:
        # 跳过触发者自身
        - condition: template
          value_template: "{{ repeat.item != master }}"
        # 仅同步 switch/light 两个域
        - condition: template
          value_template: >
            {% set d = repeat.item.split('.')[0] %}
            {{ d in ['switch','light'] }}
        # 目标当前状态需有效且与主状态不同
        - condition: template
          value_template: >
            {{ states(repeat.item) not in ['unknown','unavailable']
               and states(repeat.item) != master_state }}
        # 动态决定服务：switch.turn_on/off 或 light.turn_on/off
        - service: >
            {% set d = repeat.item.split('.')[0] %}
            {{ d }}.turn_{{ master_state }}
          target:
            entity_id: "{{ repeat.item }}"

  # 正常解锁
  - service: input_boolean.turn_off
    target:
      entity_id: "{{ _lock }}"
