blueprint:
  name: Switch Group Sync (one lock, v3 with auto-unlock)
  description: >
    组内任意一个 switch 状态变化都会同步到其它成员；使用一个 input_boolean 锁避免死循环。
    增强：并行“自解锁保险”（超时仍为 on 则强制解锁）。
  domain: automation
  input:
    switches:
      name: 同步组（开关列表）
      selector:
        entity:
          domain: switch
          multiple: true
    sync_lock:
      name: 同步锁 input_boolean
      selector:
        entity:
          domain: input_boolean
    auto_unlock_after:
      name: 自解锁超时（秒）
      description: 达到该秒数仍然为 on 则自动 turn_off；留空或 0 表示不启用保险
      default: 30
      selector:
        number:
          min: 0
          max: 600
          unit_of_measurement: s
          mode: box
          step: 1

mode: queued
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input switches

# 锁为 on 时直接跳过（避免重入）
condition:
  - condition: state
    entity_id: !input sync_lock
    state: 'off'

action:
  - variables:
      master: "{{ trigger.entity_id }}"
      master_state: "{{ trigger.to_state.state | default('unknown') }}"
      _lock: !input sync_lock
      _auto: !input auto_unlock_after

  # 上锁
  - service: input_boolean.turn_on
    target: { entity_id: "{{ _lock }}" }

  # 并行启动“自解锁保险”（仅当 _auto > 0）
  - if:
      - condition: template
        value_template: "{{ (_auto | int(0)) > 0 }}"
    then:
      - parallel:
          - sequence:
              - delay:
                  seconds: "{{ _auto | int }}"
              - if:
                  - condition: state
                    entity_id: "{{ _lock }}"
                    state: 'on'
                then:
                  - service: input_boolean.turn_off
                    target: { entity_id: "{{ _lock }}" }

  # 同步其它成员（不在模板中直接引用 !input；用 repeat.item）
  - repeat:
      for_each: !input switches
      sequence:
        - condition: template
          value_template: "{{ repeat.item != master }}"
        - condition: template
          value_template: >-
            {{ states(repeat.item) != master_state
               and states(repeat.item) not in ['unknown','unavailable'] }}
        - choose:
            - conditions: "{{ master_state == 'on' }}"
              sequence:
                - service: switch.turn_on
                  target: { entity_id: "{{ repeat.item }}" }
            - conditions: "{{ master_state == 'off' }}"
              sequence:
                - service: switch.turn_off
                  target: { entity_id: "{{ repeat.item }}" }

  # 正常解锁
  - service: input_boolean.turn_off
    target: { entity_id: "{{ _lock }}" }
