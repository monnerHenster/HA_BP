blueprint:
  name: Group bidirectional switch sync (with one lock)
  description: >
    组内任意一个 switch 状态变化都会同步到其它所有成员。
    使用一个 input_boolean 锁来避免死循环。每组推荐配置一个独立锁。
  domain: automation
  input:
    switches:
      name: 同步组（开关列表）
      description: 组内任意一个开关变化都会同步到其它所有开关（不要把不在同组的放进来）
      selector:
        entity:
          domain: switch
          multiple: true
    sync_lock:
      name: 同步锁 input_boolean
      description: 创建一个 input_boolean，用作互斥锁（建议每组一个；不同组可复用同一个，但会串行）
      selector:
        entity:
          domain: input_boolean

mode: queued
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input switches

condition: []

action:
  - variables:
      master: "{{ trigger.entity_id }}"
      master_state: "{{ trigger.to_state.state if trigger.to_state is not none else 'unknown' }}"
      members: >-
        {% set alls = !input.switches %}
        {{ alls | reject('equalto', master) | list }}
      lock_to_use: !input sync_lock
  - choose:
      - conditions:
          - condition: state
            entity_id: "{{ lock_to_use }}"
            state: 'on'
        sequence:
          - service: logbook.log
            data:
              name: "Switch sync"
              message: "Skipped sync because lock {{ lock_to_use }} is on. Trigger: {{ master }} -> {{ master_state }}"
  - service: input_boolean.turn_on
    target:
      entity_id: "{{ lock_to_use }}"
  - repeat:
      for_each: "{{ members }}"
      sequence:
        - condition: template
          value_template: "{{ states(item) != master_state and states(item) != 'unknown' }}"
        - choose:
            - conditions: "{{ master_state == 'on' }}"
              sequence:
                - service: switch.turn_on
                  target:
                    entity_id: "{{ item }}"
            - conditions: "{{ master_state == 'off' }}"
              sequence:
                - service: switch.turn_off
                  target:
                    entity_id: "{{ item }}"
  - service: input_boolean.turn_off
    target:
      entity_id: "{{ lock_to_use }}"
